# .github/workflows/deploy.yml
name: CI / CD

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write   # if you plan to migrate to GitHub OIDC in future

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    # Note: we‚Äôll configure AWS credentials via aws-actions/configure-aws-credentials,
    # rather than embedding AWS_ACCESS_KEY_ID in env at job-level.
    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Python and cache pip
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          # Install dev/test dependencies for linting and unit tests
          pip install black flake8 pytest pytest-cov moto fastapi[all] mangum boto3 pydantic

      # 3Ô∏è‚É£ Lint: Black & Flake8 (only on source folders)
      - name: Black check
        run: |
          # Exclude build dirs; adjust paths if needed
          black --check lambda_function api data_feed tests || \
            (echo "Black formatting issues in source folders. Run 'black lambda_function api data_feed tests' locally."; exit 1)

      - name: Flake8 lint
        run: |
          # Lint only source folders
          flake8 lambda_function api || \
            (echo "Flake8 issues in source folders."; exit 1)

      # 4Ô∏è‚É£ Run tests with coverage

      # 5Ô∏è‚É£ Configure AWS credentials for Terraform & smoke tests
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 6Ô∏è‚É£ Build API Lambda package
      - name: Build API Lambda package
        run: |
          # Create a temporary venv for packaging
          python -m venv .venv_pack
          source .venv_pack/bin/activate
          pip install --upgrade pip
          # Install only runtime dependencies for API Lambda
          rm -rf api_lambda_build
          mkdir -p api_lambda_build/python
          # Install dependencies into the build dir
          pip install --target api_lambda_build/python -r requirements.txt
          # Copy API code
          cp -r api api_lambda_build/
          # Zip contents into Terraform folder
          cd api_lambda_build && zip -r ../terraform/api_lambda.zip .
          cd ..
        # Add api_lambda_build/ and terraform/api_lambda.zip to .gitignore so they won't be committed

      # 7Ô∏è‚É£ Cache Terraform plugins
      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/**/*.tf*') }}

      - name: Setup Terraform plugin cache dir
        run: |
          mkdir -p ~/.terraform.d
          cat <<EOF > ~/.terraform.d/cli.hcl
          plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"
          EOF

      # 8Ô∏è‚É£ Setup Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      # 9Ô∏è‚É£ Terraform Init (with backend)
      - name: Terraform Init
        working-directory: terraform
        run: terraform init -reconfigure

      # üîü Terraform Fmt Check and Validate
      - name: Terraform Fmt Check
        working-directory: terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      # Optional: TFLint step if you have .tflint.hcl configured in terraform/
      # - name: TFLint Init & Run
      #   working-directory: terraform
      #   run: |
      #     tflint --init
      #     tflint --recursive

      # 1Ô∏è‚É£1Ô∏è‚É£ Terraform Plan
      - name: Terraform Plan
        id: tfplan
        working-directory: terraform
        run: |
          terraform plan -out=tfplan.binary \
            -var="alert_topic_arn=${{ secrets.TF_VAR_alert_TOPIC_ARN }}"  # ensure this secret exists

      # 1Ô∏è‚É£2Ô∏è‚É£ Comment Terraform Plan on PR
      - name: Comment Terraform Plan on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: terraform/tfplan.binary

      - name: Build API Lambda package
        run: |
          python -m venv .venv_pack
          source .venv_pack/bin/activate
          pip install --upgrade pip
          # Install only runtime dependencies (fastapi, mangum, pydantic)
          rm -rf api_lambda_build
          mkdir -p api_lambda_build/python
          pip install --target api_lambda_build/python fastapi mangum pydantic
          # Copy code
          cp -r api api_lambda_build/
          # Zip into terraform folder
          cd api_lambda_build && zip -r ../terraform/api_lambda.zip .
          cd ..
        

      # 1Ô∏è‚É£3Ô∏è‚É£ Terraform Apply only on push to main
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: terraform
        run: terraform apply -auto-approve tfplan.binary

      # 1Ô∏è‚É£4Ô∏è‚É£ Smoke test API endpoint (only after Apply on main)
      - name: Smoke test API endpoint (verbose)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: terraform
        env:
          AWS_REGION: us-east-1
        run: |
          set -euxo pipefail
          # 1. Retrieve the endpoint
          ENDPOINT=$(terraform output -raw api_endpoint)
          echo "Terraform output api_endpoint: $ENDPOINT"
          # 2. Check that it's non-empty
          if [ -z "$ENDPOINT" ]; then
            echo "ERROR: api_endpoint output is empty"; exit 1;
          fi
          # 3. Build test URL
          URL="${ENDPOINT%/}/records?site_id=test-site"
          echo "Calling URL: $URL"
          # 4. Perform request, capture status and body
          HTTP_STATUS=$(curl -s -o response_body.txt -w "%{http_code}" "$URL")
          echo "HTTP status: $HTTP_STATUS"
          echo "Response body:"
          cat response_body.txt || true
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "Smoke test failed: expected 200 but got $HTTP_STATUS"; exit 1;
          fi
          # Optionally: assert valid JSON array:
          if ! jq empty response_body.txt; then
            echo "Response is not valid JSON"; exit 1;
          fi


